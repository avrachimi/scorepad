// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: friendships.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const acceptFriendRequest = `-- name: AcceptFriendRequest :exec
UPDATE friendships
SET
  status = 'accepted',
  accepted_on = NOW()
WHERE
  id = $1
`

func (q *Queries) AcceptFriendRequest(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, acceptFriendRequest, id)
	return err
}

const deleteFriendRequest = `-- name: DeleteFriendRequest :exec
DELETE FROM friendships
WHERE
  id = $1
  AND (
    member1_id = $2::uuid
    OR member2_id = $2::uuid
  )
  AND status = 'pending'
`

type DeleteFriendRequestParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteFriendRequest(ctx context.Context, arg DeleteFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, deleteFriendRequest, arg.ID, arg.UserID)
	return err
}

const getFriendRequests = `-- name: GetFriendRequests :many
SELECT
  u.id,
  u.name,
  u.email,
  u.image_url,
  f.id AS friendship_id,
  CAST(
    CASE
      WHEN f.member1_id = $1 THEN f.member2_id
      ELSE f.member1_id
    END AS uuid
  ) AS requested_by,
  f.created_at AS requested_on
FROM
  friendships f
  JOIN users u ON (
    u.id = f.member1_id
    OR u.id = f.member2_id
  )
WHERE
  (
    f.member1_id = $1
    OR f.member2_id = $1
  )
  AND f.status = 'pending'
  AND u.id != $1
`

type GetFriendRequestsRow struct {
	ID           uuid.UUID
	Name         string
	Email        string
	ImageUrl     sql.NullString
	FriendshipID uuid.UUID
	RequestedBy  uuid.UUID
	RequestedOn  time.Time
}

func (q *Queries) GetFriendRequests(ctx context.Context, member1ID uuid.UUID) ([]GetFriendRequestsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriendRequests, member1ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendRequestsRow
	for rows.Next() {
		var i GetFriendRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.ImageUrl,
			&i.FriendshipID,
			&i.RequestedBy,
			&i.RequestedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriends = `-- name: GetFriends :many
SELECT
  u.id,
  u.name,
  u.email,
  u.image_url,
  u.created_at,
  f.updated_at AS friends_since,
  (
    SELECT
      COUNT(*)
    FROM
      friendships
    WHERE
      (
        friendships.member1_id = u.id
        OR friendships.member2_id = u.id
      )
      AND friendships.status = 'accepted'
  ) AS total_friends,
  (
    SELECT
      COUNT(DISTINCT m.id)
    FROM
      matches m
    WHERE
      m.created_by = u.id
      OR m.team1_player1 = u.id
      OR m.team1_player2 = u.id
      OR m.team2_player1 = u.id
      OR m.team2_player2 = u.id
  ) AS matches_played
FROM
  friendships f
  JOIN users u ON (
    (
      u.id = f.member1_id
      AND f.member2_id = $1::uuid
    )
    OR (
      u.id = f.member2_id
      AND f.member1_id = $1::uuid
    )
  )
WHERE
  f.status = 'accepted'
  AND u.id != $1::uuid
  AND (
    $2::uuid [] IS NULL
    OR NOT (u.id = ANY ($2::uuid []))
  )
  AND (
    $3::text IS NULL
    OR u.name ILIKE '%' || $3::text || '%'
  )
`

type GetFriendsParams struct {
	UserID      uuid.UUID
	ExcludedIds []uuid.UUID
	SearchQuery string
}

type GetFriendsRow struct {
	ID            uuid.UUID
	Name          string
	Email         string
	ImageUrl      sql.NullString
	CreatedAt     time.Time
	FriendsSince  sql.NullTime
	TotalFriends  int64
	MatchesPlayed int64
}

func (q *Queries) GetFriends(ctx context.Context, arg GetFriendsParams) ([]GetFriendsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriends, arg.UserID, pq.Array(arg.ExcludedIds), arg.SearchQuery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendsRow
	for rows.Next() {
		var i GetFriendsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.FriendsSince,
			&i.TotalFriends,
			&i.MatchesPlayed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFriend = `-- name: RemoveFriend :exec
DELETE FROM friendships
WHERE
  (
    member1_id = $1
    AND member2_id = $2
  )
  OR (
    member1_id = $2
    AND member2_id = $1
  )
`

type RemoveFriendParams struct {
	Member1ID uuid.UUID
	Member2ID uuid.UUID
}

func (q *Queries) RemoveFriend(ctx context.Context, arg RemoveFriendParams) error {
	_, err := q.db.ExecContext(ctx, removeFriend, arg.Member1ID, arg.Member2ID)
	return err
}

const sendFriendRequest = `-- name: SendFriendRequest :one
INSERT INTO
  friendships (id, member1_id, member2_id, status)
VALUES
  ($1, $2, $3, 'pending')
RETURNING
  id, member1_id, member2_id, status, accepted_on, created_at, updated_at
`

type SendFriendRequestParams struct {
	ID        uuid.UUID
	Member1ID uuid.UUID
	Member2ID uuid.UUID
}

func (q *Queries) SendFriendRequest(ctx context.Context, arg SendFriendRequestParams) (Friendship, error) {
	row := q.db.QueryRowContext(ctx, sendFriendRequest, arg.ID, arg.Member1ID, arg.Member2ID)
	var i Friendship
	err := row.Scan(
		&i.ID,
		&i.Member1ID,
		&i.Member2ID,
		&i.Status,
		&i.AcceptedOn,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
